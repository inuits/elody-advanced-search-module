image: node:18

stages:
  - build

build-job:       # build and publish to nexus
  # only: # only build and publish when the package.json changes
  #   changes: 
  #     - package.json
  stage: build
  image: ${REGISTRY_PROXY}/digipolis/dams-graphql:latest
  script:
    - echo "Building and publishing the code..."
    - echo //nexus.inuits.io/repository/:_authToken=${NPM_CONFIG__AUTH_TOKEN} > ~/.npmrc
    # Alternatively use these 2 lines where `npm config fix` automatically changes (`_authToken=...` to `//nexus.inuits.io/repository/:_authToken=...`) so no hardcoding is needed
    # - echo _authToken=${NPM_CONFIG__AUTH_TOKEN} >> ~/.npmrc
    # - npm config fix 

    - NPM_PACKAGE_NAME=$(node -p "require('./package.json').name") #extract the package name from package.json
    - NPM_PACKAGE_VERSION=$(node -p "require('./package.json').version") #extract the version from package.json


    # Check if the current version is not yet present in the published versions => new version to publish
      # For node:20 base image use the following line instead
      # if [[ $(npm view "${NPM_PACKAGE_NAME}" versions) != *"${NPM_PACKAGE_VERSION}"* ]]; then
    - |
      if ! npm view "$NPM_PACKAGE_NAME" versions | grep -F "$NPM_PACKAGE_VERSION"; then
        echo "Found unpublished version ${NPM_PACKAGE_VERSION} building and publishing now..."
        cp ~/codegen.ts ./codegen.ts
        mkdir ./schemas
        find ~/node_modules/ -type f -name "*.schema.ts" -exec cp -n {} ./schemas \;
        find ~/node_modules/ -type f -name "*.queries.ts" -exec cp -n {} ./schemas \;

        cat ./codegen.ts
        npm install --production=false

        # mkdir -p ../generated-types
        mkdir ./generated-types

        npm run generate
        # no longer needed after the create
        rm -rf schemas
        # mv -f ./generated-types/type-defs.ts ../generated-types/
        echo "doing an ls"
        ls -a ./generated-types/
        npm run build
        npm publish
        echo "Successfully published version ${NPM_PACKAGE_VERSION} of ${NPM_PACKAGE_NAME} to the Nexus NPM registry."
      else
        echo "Version ${NPM_PACKAGE_VERSION} of ${NPM_PACKAGE_NAME} has already been published, so no new version has been published."
      fi